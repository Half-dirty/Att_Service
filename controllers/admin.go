package controllers

import (
	"archive/zip"
	"att_service/database"
	"att_service/models"
	"att_service/services"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/gofiber/fiber/v2/middleware/session"
	"gorm.io/gorm"

	"github.com/gofiber/fiber/v2"
)

var SessionStore *session.Store

func AdminSetTargetStudent(c *fiber.Ctx) error {
	var body struct {
		ID     uint   `json:"id"`
		Source string `json:"source"`
	}
	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"success": false,
			"error":   "invalid request",
		})
	}

	sess, _ := SessionStore.Get(c)
	sess.Set("targetStudentID", body.ID)
	sess.Set("source", body.Source)
	_ = sess.Save()

	return c.JSON(fiber.Map{"success": true})
}

// AdminPage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (pages/admin_page.html)
func AdminPage(c *fiber.Ctx) error {
	return c.SendFile("views/pages/admin/main.html")
}

// AdminChangeUserRole –º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
func AdminChangeUserRole(c *fiber.Ctx) error {
	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
	type request struct {
		Role string `json:"role"`
	}

	var body request
	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"success": false, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
	}

	// –î–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
	sess, _ := SessionStore.Get(c)

	studentIDRaw := sess.Get("targetStudentID")
	studentID, ok := studentIDRaw.(uint)
	if !ok || studentID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
	if body.Role != "student" && body.Role != "examiner" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"success": false, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å"})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	if err := database.DB.Model(&models.User{}).Where("id = ?", studentID).Update("role", body.Role).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"success": false, "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏"})
	}

	return c.JSON(fiber.Map{"success": true})
}

type DeclineRequest struct {
	ID          uint     `json:"id"` // <--- –¥–æ–±–∞–≤–ª–µ–Ω ID!
	Reasons     []string `json:"reasons"`
	Explanation string   `json:"explanation"`
}

func AdminDeclineStudent(c *fiber.Ctx) error {
	var body DeclineRequest

	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
	}

	if body.ID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞—è–≤–ª–µ–Ω–∏—è")
	}

	var app models.Application
	if err := database.DB.First(&app, body.ID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}

	app.Status = "declined"
	app.Decline = &models.ApplicationDecline{
		ApplicationID: app.ID,
		Reasons:       strings.Join(body.Reasons, ", "),
		Explanation:   body.Explanation,
		CreatedAt:     time.Now(),
	}

	if err := database.DB.Save(&app).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫–∞–∑–∞")
	}

	return c.JSON(fiber.Map{"success": true})
}
func AdminCreateExamPage(c *fiber.Ctx) error {
	type ExamUser struct {
		ID       uint
		Name     string
		Avatar   string
		Selected bool
		Role     string
	}

	userID := c.Locals("userID").(uint)

	var admin models.User
	if err := database.DB.First(&admin, userID).Error; err != nil || admin.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	sess, _ := SessionStore.Get(c)
	examIDRaw := sess.Get("targetExamID")

	var exam models.Exam
	var examID uint
	var examDate, startDate, endDate string
	selectedExaminerIDs := map[uint]bool{}
	selectedStudentIDs := map[uint]bool{}
	isEditing := false

	if eid, ok := examIDRaw.(uint); ok && eid > 0 {
		examID = eid
		if err := database.DB.First(&exam, examID).Error; err == nil {
			isEditing = true
			examDate = exam.Date.Format("2006-01-02")
			startDate = exam.CommissionStart.Format("2006-01-02")
			endDate = exam.CommissionEnd.Format("2006-01-02")

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			var examinerLinks []models.ExamExaminer
			var studentLinks []models.ExamStudent
			database.DB.Where("exam_id = ?", exam.ID).Find(&examinerLinks) // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id
			database.DB.Where("exam_id = ?", exam.ID).Find(&studentLinks)  // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id

			for _, link := range examinerLinks {
				selectedExaminerIDs[link.UserID] = true
			}
			for _, link := range studentLinks {
				selectedStudentIDs[link.UserID] = true
			}
		}
	}

	var count int64
	database.DB.Model(&models.Exam{}).Where("status IN ?", []string{"scheduled", "completed"}).Count(&count)
	examCode := generateExamCode(count + 1)

	var examiners, students []ExamUser

	findAvatar := func(u models.User) string {
		if u.StoragePath != "" {
			if files, err := os.ReadDir(u.StoragePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						return "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
					}
				}
			}
		}
		return "/pictures/Generic avatar.png"
	}

	if isEditing && (exam.Status == "scheduled" || exam.Status == "completed") {
		// üîí –¢–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
		for userID := range selectedExaminerIDs {
			var u models.User
			if err := database.DB.First(&u, userID).Error; err == nil {
				role := "examiner"
				if u.ID == exam.ChairmanID {
					role = "chair"
				} else if u.ID == exam.SecretaryID {
					role = "secretary"
				}
				examiners = append(examiners, ExamUser{
					ID:       u.ID,
					Name:     fmt.Sprintf("%s %s %s", u.SurnameInIp, u.NameInIp, u.LastnameInIp),
					Avatar:   findAvatar(u),
					Selected: true,
					Role:     role,
				})
			}
		}
		for userID := range selectedStudentIDs {
			var u models.User
			if err := database.DB.First(&u, userID).Error; err == nil {
				students = append(students, ExamUser{
					ID:       u.ID,
					Name:     fmt.Sprintf("%s %s %s", u.SurnameInIp, u.NameInIp, u.LastnameInIp),
					Avatar:   findAvatar(u),
					Selected: true,
					Role:     "",
				})
			}
		}
	} else {
		// ‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PLANNED: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö
		var rawExaminers, rawStudents []models.User
		database.DB.Where("role = ? AND status = ?", "examiner", "approved").Find(&rawExaminers)
		database.DB.Where("role = ? AND status = ?", "student", "approved").Find(&rawStudents)

		for _, u := range rawExaminers {
			role := "examiner"
			if u.ID == exam.ChairmanID {
				role = "chair"
			} else if u.ID == exam.SecretaryID {
				role = "secretary"
			}
			examiners = append(examiners, ExamUser{
				ID:       u.ID,
				Name:     fmt.Sprintf("%s %s %s", u.SurnameInIp, u.NameInIp, u.LastnameInIp),
				Avatar:   findAvatar(u),
				Selected: selectedExaminerIDs[u.ID],
				Role:     role,
			})
		}

		for _, u := range rawStudents {
			var app models.Application
			if err := database.DB.Where("user_id = ?", u.ID).Order("created_at DESC").First(&app).Error; err == nil && app.Status == "approved" {
				students = append(students, ExamUser{
					ID:       u.ID,
					Name:     fmt.Sprintf("%s %s %s", u.SurnameInIp, u.NameInIp, u.LastnameInIp),
					Avatar:   findAvatar(u),
					Selected: selectedStudentIDs[u.ID],
					Role:     "",
				})
			}
		}
	}

	sess.Delete("targetExamID")
	_ = sess.Save()

	return services.Render(c, "admin", "exams/create_exam.html", fiber.Map{
		"role":             admin.Role,
		"status":           admin.Status,
		"avatar":           findAvatar(admin),
		"Examiners":        examiners,
		"Students":         students,
		"ExamCode":         examCode,
		"ExamID":           examID,
		"exam_date":        examDate,
		"commission_start": startDate,
		"commission_end":   endDate,
		"path":             c.Path(),
	})
}

func generateExamCode(index int64) string {
	return fmt.Sprintf("06-30-%d", index)
}
func AdminCreateExam(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil || currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
	form, err := c.MultipartForm()
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã")
	}

	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ—Ä–º—ã
	var examinerIDs, studentIDs []uint
	_ = json.Unmarshal([]byte(form.Value["examiners"][0]), &examinerIDs)
	_ = json.Unmarshal([]byte(form.Value["students"][0]), &studentIDs)

	var chairmanID, secretaryID uint
	if v, ok := form.Value["chairman_id"]; ok && len(v) > 0 && v[0] != "" {
		_ = json.Unmarshal([]byte(v[0]), &chairmanID)
	}
	if v, ok := form.Value["secretary_id"]; ok && len(v) > 0 && v[0] != "" {
		_ = json.Unmarshal([]byte(v[0]), &secretaryID)
	}

	dateStr := form.Value["date"][0]
	startStr := form.Value["commission_start"][0]
	endStr := form.Value["commission_end"][0]

	date, err := tryParseDate(dateStr)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: " + err.Error())
	}
	start, err := tryParseDate(startStr)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∏—Å—Å–∏–∏: " + err.Error())
	}
	end, err := tryParseDate(endStr)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏: " + err.Error())
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∏—Å—Å–∏–∏ <= –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
	if start.After(end) {
		return c.Status(fiber.StatusBadRequest).SendString("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	if len(studentIDs) == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
	}

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
	status := "planned"
	if val, ok := form.Value["auto_schedule"]; ok && val[0] == "true" {
		status = "scheduled"
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —ç–∫–∑–∞–º–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
	sess, _ := SessionStore.Get(c)
	examIDRaw := sess.Get("targetExamID")

	txErr := database.DB.Transaction(func(tx *gorm.DB) error {
		var exam models.Exam

		if eid, ok := examIDRaw.(uint); ok && eid > 0 {
			// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
			if err := tx.First(&exam, eid).Error; err != nil {
				return fiber.NewError(fiber.StatusNotFound, "–≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
			}
			exam.Date = date
			exam.CommissionStart = start
			exam.CommissionEnd = end
			exam.Status = status
			exam.ChairmanID = chairmanID
			exam.SecretaryID = secretaryID
		} else {
			// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
			exam = models.Exam{
				Date:            date,
				CommissionStart: start,
				CommissionEnd:   end,
				Status:          status,
				ChairmanID:      chairmanID,
				SecretaryID:     secretaryID,
			}
			if err := tx.Create(&exam).Error; err != nil {
				return fiber.NewError(fiber.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞")
			}
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ JestID
		var count int64
		tx.Model(&models.Exam{}).Where("status IN ?", []string{"scheduled", "completed"}).Count(&count)
		exam.JestID = generateExamCode(count + 1)

		if status != "planned" {
			var exists int64
			tx.Model(&models.Exam{}).
				Where("jest_id = ?", exam.JestID).
				Where("status IN ?", []string{"scheduled", "completed"}).
				Count(&exists)
			if exists > 0 {
				return fiber.NewError(fiber.StatusBadRequest, "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è JestID")
			}
		}

		if err := tx.Save(&exam).Error; err != nil {
			return fiber.NewError(fiber.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JestID")
		}

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –ø–æ ID —ç–∫–∑–∞–º–µ–Ω–∞
		tx.Where("exam_id = ?", exam.ID).Delete(&models.ExamExaminer{})
		tx.Where("exam_id = ?", exam.ID).Delete(&models.ExamStudent{})

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
		for _, id := range examinerIDs {
			if err := tx.Create(&models.ExamExaminer{
				JestID: exam.JestID,
				UserID: id,
				ExamID: exam.ID,
			}).Error; err != nil {
				return fiber.NewError(fiber.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤")
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
		for _, id := range studentIDs {
			var app models.Application
			if err := tx.Where("user_id = ? AND status = ?", id, "approved").Order("created_at DESC").First(&app).Error; err == nil {
				if err := tx.Create(&models.ExamStudent{
					JestID: exam.JestID,
					UserID: id,
					ExamID: exam.ID,
				}).Error; err != nil {
					return fiber.NewError(fiber.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
				}
			}
		}

		return nil
	})

	if txErr != nil {
		if e, ok := txErr.(*fiber.Error); ok {
			return c.Status(e.Code).SendString(e.Message)
		}
		return c.Status(fiber.StatusInternalServerError).SendString("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞")
	}

	// –û—á–∏—â–∞–µ–º —ç–∫–∑–∞–º–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏
	sess.Delete("targetExamID")
	_ = sess.Save()

	return c.JSON(fiber.Map{"success": true})
}

func tryParseDate(s string) (time.Time, error) {
	layouts := []string{"2006-01-02", "02.01.2006"}
	for _, layout := range layouts {
		if t, err := time.Parse(layout, s); err == nil {
			return t, nil
		}
	}
	return time.Time{}, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: %s", s)
}

func AdminCancelExam(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
	var admin models.User
	if err := database.DB.First(&admin, userID).Error; err != nil || admin.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º JSON —Ç–µ–ª–æ
	var body struct {
		ExamID uint `json:"exam_id"`
	}
	if err := c.BodyParser(&body); err != nil || body.ExamID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–≤–µ—Ä–Ω—ã–π ID —ç–∫–∑–∞–º–µ–Ω–∞")
	}

	// –ù–∞—Ö–æ–¥–∏–º —ç–∫–∑–∞–º–µ–Ω
	var exam models.Exam
	if err := database.DB.First(&exam, body.ExamID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
	exam.Status = "planned"
	if err := database.DB.Save(&exam).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
	}

	return c.JSON(fiber.Map{"success": true})
}

func AdminShowExam(c *fiber.Ctx) error {
	type ExamUser struct {
		ID       uint
		Name     string
		Avatar   string
		Selected bool
		Role     string
	}

	userID := c.Locals("userID").(uint)

	var admin models.User
	if err := database.DB.First(&admin, userID).Error; err != nil || admin.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	sess, _ := SessionStore.Get(c)
	examIDRaw := sess.Get("targetExamID")
	examID, ok := examIDRaw.(uint)
	if !ok || examID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	var exam models.Exam
	if err := database.DB.First(&exam, examID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	var examinerLinks []models.ExamExaminer
	var studentLinks []models.ExamStudent
	database.DB.Where("exam_id = ?", exam.ID).Find(&examinerLinks) // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id
	database.DB.Where("exam_id = ?", exam.ID).Find(&studentLinks)  // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id

	selectedExaminerIDs := make(map[uint]bool)
	selectedStudentIDs := make(map[uint]bool)
	for _, link := range examinerLinks {
		selectedExaminerIDs[link.UserID] = true
	}
	for _, link := range studentLinks {
		selectedStudentIDs[link.UserID] = true
	}

	findAvatar := func(storagePath string) string {
		if storagePath != "" {
			if files, err := os.ReadDir(storagePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						return "/uploads/" + filepath.Base(storagePath) + "/" + f.Name()
					}
				}
			}
		}
		return "/pictures/Generic avatar.png"
	}

	var examiners, students []ExamUser

	if exam.Status == "scheduled" || exam.Status == "completed" {
		// üîí –¢–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ
		for uid := range selectedExaminerIDs {
			var user models.User
			if err := database.DB.First(&user, uid).Error; err == nil {
				role := "examiner"
				if user.ID == exam.ChairmanID {
					role = "chair"
				} else if user.ID == exam.SecretaryID {
					role = "secretary"
				}
				examiners = append(examiners, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: true,
					Role:     role,
				})
			}
		}

		for uid := range selectedStudentIDs {
			var user models.User
			if err := database.DB.First(&user, uid).Error; err == nil {
				students = append(students, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: true,
					Role:     "student",
				})
			}
		}
	} else {
		// ‚úèÔ∏è planned ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∏ –ø–æ–º–µ—á–∞–µ–º selected
		var allExaminers, allStudents []models.User
		database.DB.Where("role = ? AND status = ?", "examiner", "approved").Find(&allExaminers)
		database.DB.Where("role = ? AND status = ?", "student", "approved").Find(&allStudents)

		for _, user := range allExaminers {
			role := "examiner"
			if user.ID == exam.ChairmanID {
				role = "chair"
			} else if user.ID == exam.SecretaryID {
				role = "secretary"
			}
			examiners = append(examiners, ExamUser{
				ID:       user.ID,
				Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
				Avatar:   findAvatar(user.StoragePath),
				Selected: selectedExaminerIDs[user.ID],
				Role:     role,
			})
		}

		for _, user := range allStudents {
			var app models.Application
			if err := database.DB.Where("user_id = ?", user.ID).Order("created_at DESC").First(&app).Error; err == nil && app.Status == "approved" {
				students = append(students, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: selectedStudentIDs[user.ID],
					Role:     "student",
				})
			}
		}
	}

	return services.Render(c, "admin", "exams/create_exam.html", fiber.Map{
		"role":             admin.Role,
		"status":           admin.Status,
		"avatar":           findAvatar(admin.StoragePath),
		"ExamCode":         exam.JestID,
		"ExamID":           exam.ID,
		"Examiners":        examiners,
		"Students":         students,
		"exam_date":        exam.Date.Format("2006-01-02"),
		"commission_start": exam.CommissionStart.Format("2006-01-02"),
		"commission_end":   exam.CommissionEnd.Format("2006-01-02"),
		"path":             c.Path(),
	})
}

func DeclineApplication(c *fiber.Ctx) error {
	type DeclineRequest struct {
		ID          uint     `json:"id"`
		Reasons     []string `json:"reasons"`
		Explanation string   `json:"explanation"`
	}

	var req DeclineRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
	}

	if req.ID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–∞—è–≤–ª–µ–Ω–∏—è")
	}

	// –ò—â–µ–º –∑–∞—è–≤–∫—É
	var app models.Application
	if err := database.DB.Preload("Decline").First(&app, req.ID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫–∞–∑
	app.Status = "declined"
	app.Decline = &models.ApplicationDecline{
		ApplicationID: app.ID,
		Reasons:       strings.Join(req.Reasons, ", "),
		Explanation:   req.Explanation,
		CreatedAt:     time.Now(),
	}

	if err := database.DB.Save(&app).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
	}

	return c.JSON(fiber.Map{
		"success": true,
	})
}

func AdminSetTargetExam(c *fiber.Ctx) error {
	var body struct {
		ID uint `json:"id"`
	}
	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "invalid request"})
	}

	sess, _ := SessionStore.Get(c)
	sess.Set("targetExamID", body.ID)
	_ = sess.Save()

	return c.JSON(fiber.Map{"success": true})
}

func AdminShowStudentProfile(c *fiber.Ctx) error {
	// –î–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
	sess, _ := SessionStore.Get(c)

	studentIDRaw := sess.Get("targetStudentID")
	studentID, ok := studentIDRaw.(uint)
	if !ok || studentID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	source := sess.Get("source")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var student models.User
	if err := database.DB.First(&student, studentID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
	avatar := ""
	if student.StoragePath != "" {
		if files, err := os.ReadDir(student.StoragePath); err == nil {
			for _, f := range files {
				if strings.HasPrefix(f.Name(), "avatar") {
					avatar = "/uploads/" + filepath.Base(student.StoragePath) + "/" + f.Name()
					break
				}
			}
		}
	}
	if avatar == "" {
		avatar = "../pictures/Generic avatar.png"
	}

	showButtons := false

	if source == "application" {
		showButtons = true
	}

	return services.Render(c, "admin", "users/show-main.html", fiber.Map{
		"id":             student.ID,
		"surname_in_ip":  student.SurnameInIp,
		"surname_in_rp":  student.SurnameInRp,
		"surname_in_dp":  student.SurnameInDp,
		"name_in_ip":     student.NameInIp,
		"name_in_rp":     student.NameInRp,
		"name_in_dp":     student.NameInDp,
		"lastname_in_ip": student.LastnameInIp,
		"lastname_in_rp": student.LastnameInRp,
		"lastname_in_dp": student.LastnameInDp,
		"sex":            student.Sex,
		"email":          student.Email,
		"mail":           student.Mail,
		"mobile_phone":   student.MobilePhone,
		"work_phone":     student.WorkPhone,
		"status":         student.Status,
		"avatar":         avatar,
		"showButtons":    showButtons,
		"decline_reason": student.DeclineReason,
		"role":           student.Role,
	})
}

func GetPastExamsPage(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil || currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–∞–º–µ–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "completed"
	var exams []models.Exam
	if err := database.DB.
		Where("status = ?", "completed").
		Order("date DESC").
		Find(&exams).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–≤")
	}

	type ExamItem struct {
		Date string
	}

	var list []ExamItem
	for _, e := range exams {
		list = append(list, ExamItem{
			Date: e.Date.Format("02.01.2006"),
		})
	}

	return services.Render(c, "admin", "exams/exam-list.html", fiber.Map{
		"Exams": list,
	})
}

func ExamPlanningPage(c *fiber.Ctx) error {
	var exams []models.Exam
	if err := database.DB.
		Where("status = ?", "planned").
		Order("date ASC").
		Find(&exams).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤")
	}

	type ExamItem struct {
		ID   uint
		Date string
	}

	var plannedExams []ExamItem
	for _, exam := range exams {
		plannedExams = append(plannedExams, ExamItem{
			ID:   exam.ID,
			Date: exam.Date.Format("02.01.2006"),
		})
	}

	return services.Render(c, "admin", "exams/exam-planning.html", fiber.Map{
		"PlannedExams": plannedExams,
	})
}

func ExamScheduledPage(c *fiber.Ctx) error {
	var exams []models.Exam
	if err := database.DB.
		Where("status = ?", "scheduled").
		Order("date ASC").
		Find(&exams).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤")
	}

	type ExamItem struct {
		ID   uint
		Date string
	}

	var scheduledExams []ExamItem
	for _, exam := range exams {
		scheduledExams = append(scheduledExams, ExamItem{
			ID:   exam.ID,
			Date: exam.Date.Format("02.01.2006"),
		})
	}

	return services.Render(c, "admin", "exams/exam-scheduled.html", fiber.Map{
		"ScheduledExams": scheduledExams,
	})
}

func ScheduleExam(c *fiber.Ctx) error {
	var input struct {
		ID uint `json:"id"`
	}
	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
	}

	var exam models.Exam
	if err := database.DB.First(&exam, input.ID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	exam.Status = "scheduled"
	if err := database.DB.Save(&exam).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
	}

	return c.JSON(fiber.Map{"success": true})
}

func AdminShowStudentDocuments(c *fiber.Ctx) error {
	// –î–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
	sess, _ := SessionStore.Get(c)

	studentIDRaw := sess.Get("targetStudentID")
	studentID, ok := studentIDRaw.(uint)
	if !ok || studentID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	source := sess.Get("source")

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∞—Å–ø–æ—Ä—Ç, –¥–∏–ø–ª–æ–º
	var student models.User
	if err := database.DB.First(&student, studentID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	var passport models.Passport
	_ = database.DB.Where("user_id = ?", student.ID).First(&passport)

	var edu models.EducationDocument
	_ = database.DB.Where("user_id = ?", student.ID).First(&edu)

	// –°–∫–∞–Ω-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	passportImages := []string{}
	snilsImages := []string{}
	diplomImages := []string{}

	if student.StoragePath != "" {
		entries, _ := os.ReadDir(student.StoragePath)
		for _, f := range entries {
			fp := "/uploads/" + filepath.Base(student.StoragePath) + "/" + f.Name()
			switch {
			case strings.Contains(f.Name(), "–ø–∞—Å–ø–æ—Ä—Ç"):
				passportImages = append(passportImages, fp)
			case strings.Contains(f.Name(), "—Å–Ω–∏–ª—Å"):
				snilsImages = append(snilsImages, fp)
			case strings.Contains(f.Name(), "–¥–∏–ø–ª–æ–º"):
				diplomImages = append(diplomImages, fp)
			}
		}
	}
	showButtons := false

	if source == "application" {
		showButtons = true
	}

	return services.Render(c, "admin", "users/show-documents.html", fiber.Map{
		"id":              student.ID,
		"passport_serial": passport.PassportSeries,
		"unit_code":       passport.PassportDivisionCode,
		"passport_num":    passport.PassportNumber,
		"passport_date":   passport.PassportIssueDate.Format("2006-01-02"),
		"passport_issue":  passport.PassportIssuedBy,
		"bithday_date":    passport.BirthDate.Format("2006-01-02"),
		"born_place":      passport.BirthPlace,
		"registr_address": passport.RegistrationAddress,
		"snils_num":       student.Snils,
		"diplom_num":      edu.DiplomaRegNumber,
		"status":          student.Status,
		"avatar":          findAvatar(student.StoragePath),
		"passport_images": passportImages,
		"snils_images":    snilsImages,
		"diplom_images":   diplomImages,
		"showButtons":     showButtons,
		"decline_reason":  student.DeclineReason,
		"role":            student.Role,
	})
}

func AdminConfirmStudent(c *fiber.Ctx) error {
	// –î–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
	sess, _ := SessionStore.Get(c)

	studentIDRaw := sess.Get("targetStudentID")
	studentID, ok := studentIDRaw.(uint)
	if !ok || studentID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	adminID := c.Locals("userID").(uint)
	var admin models.User
	if err := database.DB.First(&admin, adminID).Error; err != nil || admin.Role != "admin" {
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{
			"success": false,
			"error":   "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞",
		})
	}

	// –ß–∏—Ç–∞–µ–º JSON —Ç–µ–ª–æ
	var req struct {
		Confirm bool `json:"confirm"`
	}
	if err := c.BodyParser(&req); err != nil || !req.Confirm {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"success": false,
			"error":   "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
		})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
	var student models.User
	if err := database.DB.First(&student, studentID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
			"success": false,
			"error":   "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
		})
	}

	student.Status = "approved"
	if err := database.DB.Save(&student).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
			"success": false,
			"error":   "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏",
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
func findAvatar(path string) string {
	if path == "" {
		return ""
	}
	files, _ := os.ReadDir(path)
	for _, f := range files {
		if strings.HasPrefix(f.Name(), "avatar") {
			return "/uploads/" + filepath.Base(path) + "/" + f.Name()
		}
	}
	return ""
}

func AdminUserApplication(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).SendString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	if currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var users []models.User
	if err := database.DB.Where("status = ?", "pending").Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}
	// –°–±–æ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞
	type UserItem struct {
		ID       uint
		Surname  string
		Name     string
		Lastname string
		Role     string
		Avatar   string
	}

	var list []UserItem
	for _, u := range users {
		avatar := ""
		if u.StoragePath != "" {
			if files, err := os.ReadDir(u.StoragePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						avatar = "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
						break
					}
				}
			}
		}
		if avatar == "" {
			avatar = "../../pictures/Generic avatar.png"
		}

		list = append(list, UserItem{
			ID:       u.ID,
			Surname:  u.SurnameInIp,
			Name:     u.NameInIp,
			Lastname: u.LastnameInIp,
			Role:     u.Role,
			Avatar:   avatar,
		})
	}

	// –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
	return services.Render(c, "admin", "users/user-applications.html", fiber.Map{
		"Lists": list,
	})
}

func AdminSelectUsersByRole(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}
	if currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	var req struct {
		Role string `json:"role"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	// –†–æ–ª–µ–≤–æ–π –º–∞–ø–ø–∏–Ω–≥
	roleMap := map[string]string{
		"students":  "student",
		"examiners": "examiner",
		"admin":     "admin",
	}

	var users []models.User
	query := database.DB

	if req.Role != "all" {
		if mappedRole, ok := roleMap[req.Role]; ok {
			query = query.Where("role = ?", mappedRole)
		} else {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"})
		}
	}

	if err := query.Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î"})
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	type UserItem struct {
		ID       uint   `json:"id"`
		Surname  string `json:"surname"`
		Name     string `json:"name"`
		Lastname string `json:"lastname"`
		Role     string `json:"role"`
		Avatar   string `json:"avatar"`
	}

	var list []UserItem
	for _, u := range users {
		avatar := "/pictures/Generic avatar.png"
		if u.StoragePath != "" {
			if files, err := os.ReadDir(u.StoragePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						avatar = "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
						break
					}
				}
			}
		}

		list = append(list, UserItem{
			ID:       u.ID,
			Surname:  u.SurnameInIp,
			Name:     u.NameInIp,
			Lastname: u.LastnameInIp,
			Role:     u.Role,
			Avatar:   avatar,
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"users":   list,
	})
}

func AdminSelectApplicationUsers(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}
	if currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	var req struct {
		Role string `json:"role"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω–æ–π —Ä–æ–ª—å—é –∏ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
	var users []models.User
	query := database.DB.Where("status = ?", "pending") // —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ

	roleMap := map[string]string{
		"students":  "student",
		"examiners": "examiner",
		"admin":     "admin",
	}

	role := req.Role
	if role != "all" {
		if mapped, ok := roleMap[role]; ok {
			role = mapped
			query = query.Where("role = ?", role)
		} else {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å"})
		}
	}

	if err := query.Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"})
	}

	type UserItem struct {
		ID       uint   `json:"id"`
		Surname  string `json:"surname"`
		Name     string `json:"name"`
		Lastname string `json:"lastname"`
		Role     string `json:"role"`
		Avatar   string `json:"avatar"`
	}

	var list []UserItem
	for _, u := range users {
		avatar := "/pictures/Generic avatar.png"
		if u.StoragePath != "" {
			if files, err := os.ReadDir(u.StoragePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						avatar = "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
						break
					}
				}
			}
		}

		list = append(list, UserItem{
			ID:       u.ID,
			Surname:  u.SurnameInIp,
			Name:     u.NameInIp,
			Lastname: u.LastnameInIp,
			Role:     u.Role,
			Avatar:   avatar,
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"users":   list,
	})
}

func AdminSearchAll(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{"success": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}
	if currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).JSON(fiber.Map{"success": false, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	var req struct {
		Surname string `json:"surname"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"success": false, "error": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∞–º–∏–ª–∏–∏
	var users []models.User
	if err := database.DB.Where("surname_in_ip ILIKE ?", "%"+req.Surname+"%").Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"success": false, "error": "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞"})
	}

	// –°–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	type UserItem struct {
		ID       uint   `json:"id"`
		Surname  string `json:"surname"`
		Name     string `json:"name"`
		Lastname string `json:"lastname"`
		Role     string `json:"role"`
		Avatar   string `json:"avatar"`
	}

	var result []UserItem
	for _, u := range users {
		avatar := ""
		if u.StoragePath != "" {
			files, _ := os.ReadDir(u.StoragePath)
			for _, f := range files {
				if strings.HasPrefix(f.Name(), "avatar") {
					avatar = "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
					break
				}
			}
		}
		result = append(result, UserItem{
			ID:       u.ID,
			Surname:  u.SurnameInIp,
			Name:     u.NameInIp,
			Lastname: u.LastnameInIp,
			Role:     u.Role,
			Avatar:   avatar,
		})
	}

	if len(result) == 0 {
		return c.JSON(fiber.Map{
			"success": false,
		})
	}

	return c.JSON(fiber.Map{
		"success": true,
		"users":   result,
	})
}

// AdminUserListPage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (pages/admin__user_list.html)
func AdminUserList(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
	var currentUser models.User
	if err := database.DB.First(&currentUser, userID).Error; err != nil {
		return c.Status(fiber.StatusUnauthorized).SendString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	if currentUser.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var users []models.User
	if err := database.DB.Find(&users).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –§–ò–û, —Ä–æ–ª—å—é –∏ –∞–≤–∞—Ç–∞—Ä–∫–æ–π
	type UserItem struct {
		ID       uint   `json:"id"`
		Surname  string `json:"surname"`
		Name     string `json:"name"`
		Lastname string `json:"lastname"`
		Role     string `json:"role"`
		Avatar   string `json:"avatar"`
	}

	var list []UserItem
	for _, u := range users {
		avatar := ""
		if u.StoragePath != "" {
			files, _ := os.ReadDir(u.StoragePath)
			for _, f := range files {
				if strings.HasPrefix(f.Name(), "avatar") {
					avatar = "/uploads/" + filepath.Base(u.StoragePath) + "/" + f.Name()
					break
				}
			}
		}
		list = append(list, UserItem{
			ID:       u.ID,
			Surname:  u.SurnameInIp,
			Name:     u.NameInIp,
			Lastname: u.LastnameInIp,
			Role:     u.Role,
			Avatar:   avatar,
		})
	}

	return services.Render(c, "admin", "users/user-list.html", fiber.Map{
		"Lists": list,
	})
}

func AdminDeleteStudent(c *fiber.Ctx) error {
	// –î–æ—Å—Ç–∞—ë–º —Å–µ—Å—Å–∏—é
	sess, _ := SessionStore.Get(c)

	studentIDRaw := sess.Get("targetStudentID")
	userID, ok := studentIDRaw.(uint)
	if !ok || userID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	var user models.User
	if err := database.DB.First(&user, userID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"success": false, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	// –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
	if user.StoragePath != "" {
		if stat, err := os.Stat(user.StoragePath); err == nil && stat.IsDir() {
			archiveDir := "./archive"
			if _, err := os.Stat(archiveDir); os.IsNotExist(err) {
				if err := os.MkdirAll(archiveDir, 0755); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∞—Ä—Ö–∏–≤–∞: %v", err)
					return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"success": false, "error": "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"})
				}
			}
			timestamp := time.Now().Format("20060102_150405")
			safeName := fmt.Sprintf("%d_%s_%s", userID, sanitizeString(user.SurnameInIp), sanitizeString(user.Email))
			zipFile := filepath.Join(archiveDir, fmt.Sprintf("%s_%s.zip", safeName, timestamp))
			if err := zipDirectory(user.StoragePath, zipFile); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
				return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"success": false, "error": "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"})
			}
			_ = os.RemoveAll(user.StoragePath)
		}
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	_ = database.DB.Unscoped().Where("user_id = ?", userID).Delete(&models.Passport{}).Error
	_ = database.DB.Unscoped().Where("user_id = ?", userID).Delete(&models.EducationDocument{}).Error
	_ = database.DB.Unscoped().Where("user_id = ?", userID).Delete(&models.UserDocument{}).Error

	// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, –±–µ–∑ soft delete
	if err := database.DB.Unscoped().Delete(&user).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"success": false, "error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	}

	sess.Delete("targetStudentID")
	sess.Delete("source")
	_ = sess.Save()

	return c.JSON(fiber.Map{"success": true, "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω"})
}

// zipDirectory –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ zip-—Ñ–∞–π–ª.
func zipDirectory(srcDir, destZip string) error {
	zipFile, err := os.Create(destZip)
	if err != nil {
		return err
	}
	defer zipFile.Close()
	zipWriter := zip.NewWriter(zipFile)
	defer zipWriter.Close()
	return filepath.Walk(srcDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}
		relPath, err := filepath.Rel(srcDir, path)
		if err != nil {
			return err
		}
		header, err := zip.FileInfoHeader(info)
		if err != nil {
			return err
		}
		header.Name = relPath
		header.Method = zip.Deflate
		writer, err := zipWriter.CreateHeader(header)
		if err != nil {
			return err
		}
		file, err := os.Open(path)
		if err != nil {
			return err
		}
		defer file.Close()
		_, err = io.Copy(writer, file)
		return err
	})
}

func sanitizeString(s string) string {
	s = strings.TrimSpace(s)
	s = strings.ReplaceAll(s, " ", "_")
	s = strings.ReplaceAll(s, "@", "_")
	s = strings.ReplaceAll(s, "/", "_")
	return s
}

func GetAdminExamApplications(c *fiber.Ctx) error {
	adminID := c.Locals("userID").(uint)
	if adminID == 0 {
		return c.Status(fiber.StatusUnauthorized).SendString("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
	}

	var applications []models.Application
	if err := database.DB.Where("status = ?", "pending").Find(&applications).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫")
	}

	type ExamItem struct {
		UserName string
		AppID    uint
		Avatar   string
	}

	var exams []ExamItem
	for _, app := range applications {
		var user models.User
		if err := database.DB.First(&user, app.UserID).Error; err == nil {
			fullName := fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp)

			avatar := ""
			if user.StoragePath != "" {
				files, _ := os.ReadDir(user.StoragePath)
				for _, file := range files {
					if strings.HasPrefix(file.Name(), "avatar") {
						avatar = "/uploads/" + filepath.Base(user.StoragePath) + "/" + file.Name()
						break
					}
				}
			}

			exams = append(exams, ExamItem{
				UserName: fullName,
				AppID:    app.ID,
				Avatar:   avatar,
			})
		}
	}

	return services.Render(c, "admin", "exam_applications/exam-applications.html", fiber.Map{
		"Exams": exams,
	})
}

func AdminShowStudentApplication(c *fiber.Ctx) error {
	adminID := c.Locals("userID").(uint)
	if adminID == 0 {
		return c.Status(fiber.StatusUnauthorized).SendString("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
	}

	appID, err := strconv.Atoi(c.Params("id"))
	if err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–ª–µ–Ω–∏—è")
	}

	var application models.Application
	if err := database.DB.First(&application, appID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}

	var user models.User
	if err := database.DB.First(&user, application.UserID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	getImages := func(prefix string) []string {
		var images []string
		if user.StoragePath != "" {
			files, _ := os.ReadDir(user.StoragePath)
			for _, f := range files {
				if strings.Contains(f.Name(), prefix) {
					images = append(images, "/uploads/"+filepath.Base(user.StoragePath)+"/"+f.Name())
				}
			}
		}
		return images
	}

	return services.Render(c, "admin", "exam_applications/exam-application.html", fiber.Map{
		"AppID":                       appID,
		"native_language":             application.NativeLanguage,
		"citizenship":                 application.Citizenship,
		"marital_status":              application.MaritalStatus,
		"organization":                application.Organization,
		"job_position":                application.JobPosition,
		"requested_category":          application.RequestedCategory,
		"basis_for_attestation":       application.BasisForAttestation,
		"existing_category":           application.ExistingCategory,
		"existing_category_term":      application.ExistingCategoryTerm,
		"work_experience":             application.WorkExperience,
		"current_position_experience": application.CurrentPositionExperience,
		"awards_info":                 application.AwardsInfo,
		"training_info":               application.TrainingInfo,
		"memberships":                 application.Memberships,
		"consent":                     application.Consent,
		"status":                      user.Status,
		"role":                        user.Role,
		"avatar":                      findAvatar(user.StoragePath),
		"diplom_images":               getImages("–¥–∏–ø–ª–æ–º"),
		"diplom_jest_images":          getImages("–∂–µ—Å—Ç"),
		"passport_images":             getImages("–ø–∞—Å–ø–æ—Ä—Ç"),
		"tk_book_images":              getImages("—Ç—Ä—É–¥–æ–≤–∞—è"),
		"characteristic_images":       getImages("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"),
	})
}

func ApproveApplication(c *fiber.Ctx) error {
	var body struct {
		ID uint `json:"id"`
	}

	if err := c.BodyParser(&body); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
	}

	var application models.Application
	if err := database.DB.First(&application, body.ID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}

	application.Status = "approved"
	if err := database.DB.Save(&application).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
	}

	return c.SendStatus(fiber.StatusOK)
}
func AdminViewExam(c *fiber.Ctx) error {
	userID := c.Locals("userID").(uint)

	var admin models.User
	if err := database.DB.First(&admin, userID).Error; err != nil || admin.Role != "admin" {
		return c.Status(fiber.StatusForbidden).SendString("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
	}

	sess, _ := SessionStore.Get(c)
	examIDRaw := sess.Get("targetExamID")
	examID, ok := examIDRaw.(uint)
	if !ok || examID == 0 {
		return c.Status(fiber.StatusBadRequest).SendString("ID —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏")
	}

	var exam models.Exam
	if err := database.DB.First(&exam, examID).Error; err != nil {
		return c.Status(fiber.StatusNotFound).SendString("–≠–∫–∑–∞–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
	var examinerLinks []models.ExamExaminer
	var studentLinks []models.ExamStudent
	database.DB.Where("exam_id = ?", exam.ID).Find(&examinerLinks) // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id
	database.DB.Where("exam_id = ?", exam.ID).Find(&studentLinks)  // –∏–∑–º–µ–Ω–µ–Ω–æ —Å jest_id –Ω–∞ exam_id

	selectedExaminerIDs := make(map[uint]bool)
	selectedStudentIDs := make(map[uint]bool)
	for _, link := range examinerLinks {
		selectedExaminerIDs[link.UserID] = true
	}
	for _, link := range studentLinks {
		selectedStudentIDs[link.UserID] = true
	}

	type ExamUser struct {
		ID       uint
		Name     string
		Avatar   string
		Selected bool
		Role     string
	}

	findAvatar := func(storagePath string) string {
		if storagePath != "" {
			if files, err := os.ReadDir(storagePath); err == nil {
				for _, f := range files {
					if strings.HasPrefix(f.Name(), "avatar") {
						return "/uploads/" + filepath.Base(storagePath) + "/" + f.Name()
					}
				}
			}
		}
		return "/pictures/Generic avatar.png"
	}

	var examiners, students []ExamUser

	if exam.Status == "scheduled" || exam.Status == "completed" {
		// üîí –¢–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä—ã –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã
		for uid := range selectedExaminerIDs {
			var user models.User
			if err := database.DB.First(&user, uid).Error; err == nil {
				role := "examiner"
				if user.ID == exam.ChairmanID {
					role = "chair"
				} else if user.ID == exam.SecretaryID {
					role = "secretary"
				}
				examiners = append(examiners, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: true,
					Role:     role,
				})
			}
		}

		for uid := range selectedStudentIDs {
			var user models.User
			if err := database.DB.First(&user, uid).Error; err == nil {
				students = append(students, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: true,
					Role:     "student",
				})
			}
		}
	} else {
		// ‚úèÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö approved + –∑–∞—è–≤–∫–∏ approved, –æ—Ç–º–µ—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
		var allExaminers, allStudents []models.User
		database.DB.Where("role = ? AND status = ?", "examiner", "approved").Find(&allExaminers)
		database.DB.Where("role = ? AND status = ?", "student", "approved").Find(&allStudents)

		for _, user := range allExaminers {
			role := "examiner"
			if user.ID == exam.ChairmanID {
				role = "chair"
			} else if user.ID == exam.SecretaryID {
				role = "secretary"
			}
			examiners = append(examiners, ExamUser{
				ID:       user.ID,
				Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
				Avatar:   findAvatar(user.StoragePath),
				Selected: selectedExaminerIDs[user.ID],
				Role:     role,
			})
		}

		for _, user := range allStudents {
			var app models.Application
			if err := database.DB.Where("user_id = ?", user.ID).Order("created_at DESC").First(&app).Error; err == nil && app.Status == "approved" {
				students = append(students, ExamUser{
					ID:       user.ID,
					Name:     fmt.Sprintf("%s %s %s", user.SurnameInIp, user.NameInIp, user.LastnameInIp),
					Avatar:   findAvatar(user.StoragePath),
					Selected: selectedStudentIDs[user.ID],
					Role:     "student",
				})
			}
		}
	}

	return services.Render(c, "admin", "exams/view_exam.html", fiber.Map{
		"role":             admin.Role,
		"status":           admin.Status,
		"avatar":           findAvatar(admin.StoragePath),
		"ExamCode":         exam.JestID,
		"ExamID":           exam.ID,
		"Examiners":        examiners,
		"Students":         students,
		"exam_date":        exam.Date.Format("2006-01-02"),
		"commission_start": exam.CommissionStart.Format("2006-01-02"),
		"commission_end":   exam.CommissionEnd.Format("2006-01-02"),
		"path":             c.Path(),
	})
}
