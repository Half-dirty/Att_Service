// –ù–æ–≤—ã–π ws.go —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤

package services

import (
	"att_service/database"
	"att_service/models"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gofiber/websocket/v2"
)

type Client struct {
	UserID uint
	Name   string
	Role   string
	Conn   *websocket.Conn
}

type ExaminerInfo struct {
	ID     uint
	Name   string
	Avatar string
}

type ExamRoom struct {
	ChairmanID   uint
	Chairman     *Client
	Examiners    map[uint]*Client
	ExaminerList []ExaminerInfo
	Connected    map[uint]bool
	Progress     map[uint]int // studentID -> number of votes
	Quorum       int
	Mutex        sync.Mutex
}

var examRooms = make(map[int]*ExamRoom)
var globalMutex sync.Mutex

func WebSocketHandler(c *websocket.Conn) {
	defer c.Close()

	var room *ExamRoom
	var client *Client

	for {
		_, msg, err := c.ReadMessage()
		if err != nil {
			break
		}

		var incoming struct {
			Type string          `json:"type"`
			Data json.RawMessage `json:"data"`
		}

		if err := json.Unmarshal(msg, &incoming); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			continue
		}

		switch incoming.Type {
		case "init_user":
			var data struct {
				ExamID int    `json:"exam_id"`
				UserID uint   `json:"user_id"`
				Name   string `json:"name"`
				Role   string `json:"role"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ init_user:", err)
				continue
			}
			r, cl := handleInitUser(c, data.ExamID, data.UserID, data.Name)
			r.Mutex.Lock()
			r.Connected[cl.UserID] = true
			r.Mutex.Unlock()
			room = r
			client = cl
			go startPingPong(room)
			broadcastExaminerList(room)
			broadcastChairmanStatus(room)

		case "request_examiner_list":
			var data struct {
				ExamID int `json:"exam_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ request_examiner_list:", err)
				continue
			}
			handleRequestExaminerList(c, data.ExamID)

		case "start_exam":
			var data struct {
				ExamID int `json:"exam_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ start_exam:", err)
				continue
			}
			handleStartExam(c, data.ExamID)

		case "open_student":
			var data struct {
				ExamID    int  `json:"exam_id"`
				StudentID uint `json:"student_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ open_student:", err)
				continue
			}
			handleOpenStudent(c, data.ExamID, data.StudentID)

		case "progress_update":
			var data struct {
				ExamID          int  `json:"exam_id"`
				StudentID       uint `json:"student_id"`
				CurrentProgress int  `json:"current_progress"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ progress_update:", err)
				continue
			}
			handleProgressUpdate(c, data.ExamID, data.StudentID, data.CurrentProgress)

		case "save_grade":
			var data struct {
				ExamID          uint   `json:"exam_id"`
				StudentID       uint   `json:"student_id"`
				Scores          []int  `json:"scores"`          // –±–∞–ª–ª—ã (–º–∞—Å—Å–∏–≤)
				Qualification   string `json:"qualification"`   // –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
				Recommendations string `json:"recommendations"` // —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
				Specialization  string `json:"specialization"`  // —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
				Abstained       bool   `json:"abstained"`       // —Ñ–ª–∞–≥ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ save_grade:", err)
				continue
			}

			if room == nil || client == nil {
				log.Println("–ù–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
				continue
			}

			// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –≤ ExamGrade
			grade := models.ExamGrade{
				ExamID:         data.ExamID,
				ExaminerID:     client.UserID,
				StudentID:      data.StudentID,
				Qualification:  data.Qualification,
				Specialization: data.Specialization,
				Recommendation: data.Recommendations,
				Abstained:      data.Abstained,
			}

			if err := database.DB.Create(&grade).Error; err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏:", err)
				continue
			}
			// === –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ExamGrade ===

			// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
			var gradesCount int64
			database.DB.Model(&models.ExamGrade{}).
				Where("exam_id = ? AND student_id = ?", data.ExamID, data.StudentID).
				Count(&gradesCount)

			// –£–∑–Ω–∞—ë–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
			var exam models.Exam
			if err := database.DB.First(&exam, data.ExamID).Error; err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞:", err)
				continue
			}

			// –°—á–∏—Ç–∞–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ + –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è
			var totalExaminers int64
			database.DB.Table("exam_examiners").Where("exam_id = ?", data.ExamID).Count(&totalExaminers)
			totalExaminers += 1 // –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Ç–æ–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç

			// –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
			progressPercent := int(float64(gradesCount) / float64(totalExaminers) * 100)

			// –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç?
			completed := gradesCount >= totalExaminers

			// –®–ª—ë–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			if room != nil {
				room.Mutex.Lock()
				defer room.Mutex.Unlock()

				for _, examiner := range room.Examiners {
					if examiner.Conn != nil {
						examiner.Conn.WriteJSON(map[string]interface{}{
							"type": "progress_update",
							"data": map[string]interface{}{
								"studentId": data.StudentID,
								"progress":  progressPercent,
								"completed": completed,
							},
						})
					}
				}
				if room.Chairman != nil && room.Chairman.Conn != nil {
					room.Chairman.Conn.WriteJSON(map[string]interface{}{
						"type": "progress_update",
						"data": map[string]interface{}{
							"studentId": data.StudentID,
							"progress":  progressPercent,
							"completed": completed,
						},
					})
				}
			}
			// –ï—Å–ª–∏ –ù–ï –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è ‚Äî —Å–æ–∑–¥–∞—ë–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
			if !data.Abstained && len(data.Scores) > 0 {
				for i, score := range data.Scores {
					criterion := models.ExamGradeCriterion{
						GradeID:     grade.ID,
						CriterionID: i + 1, // üî• –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–¥—É—Ç —Å 1
						Score:       optionalInt(score),
					}
					if err := database.DB.Create(&criterion).Error; err != nil {
						log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è:", err)
						continue
					}
				}
			}

			// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			var redirectURL string
			if client.Role == "chairman" {
				redirectURL = fmt.Sprintf("/user/exam/start/%d", data.ExamID)
			} else {
				redirectURL = fmt.Sprintf("/user/exam/waiting/%d", data.ExamID)
			}

			if client.Conn != nil {
				client.Conn.WriteJSON(map[string]interface{}{
					"type": "redirect",
					"data": map[string]interface{}{
						"url": redirectURL,
					},
				})
			}

		case "ping":
			// –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∞ –ø–∏–Ω–≥
			continue

		default:
			log.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", incoming.Type)
		}
	}

	if room != nil && client != nil {
		room.Mutex.Lock()
		delete(room.Connected, client.UserID)
		room.Mutex.Unlock()
		broadcastExaminerList(room)
		broadcastChairmanStatus(room)
	}
}

func optionalInt(v int) *int {
	return &v
}

func handleInitUser(c *websocket.Conn, examID int, userID uint, userName string) (*ExamRoom, *Client) {
	var exam models.Exam
	if err := database.DB.First(&exam, examID).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞:", err)
		return nil, nil
	}

	client := &Client{
		UserID: userID,
		Name:   userName,
		Conn:   c,
	}

	globalMutex.Lock()
	room, exists := examRooms[examID]
	if !exists {
		room = &ExamRoom{
			Examiners:    make(map[uint]*Client),
			Connected:    make(map[uint]bool),
			Progress:     make(map[uint]int),
			Quorum:       2,
			ExaminerList: []ExaminerInfo{},
		}
		examRooms[examID] = room
	}
	globalMutex.Unlock()

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	if userID == exam.ChairmanID {
		client.Role = "chairman"
		room.ChairmanID = userID
		room.Chairman = client

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞
		var examinerIDs []uint
		database.DB.Table("exam_examiners").Where("exam_id = ?", examID).Pluck("user_id", &examinerIDs)

		room.ExaminerList = []ExaminerInfo{}
		for _, eid := range examinerIDs {
			if eid == exam.ChairmanID {
				continue
			}
			var user models.User
			if err := database.DB.First(&user, eid).Error; err == nil {
				room.ExaminerList = append(room.ExaminerList, ExaminerInfo{
					ID:     user.ID,
					Name:   user.SurnameInIp + " " + user.NameInIp + " " + user.LastnameInIp,
					Avatar: findAvatarPath(user.StoragePath),
				})
			}
		}
	} else {
		client.Role = "examiner"
		room.Examiners[userID] = client
	}

	return room, client
}

func handleRequestExaminerList(c *websocket.Conn, examID int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}
	broadcastExaminerList(room)
}

func handleStartExam(c *websocket.Conn, examID int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		log.Println("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", examID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –≤ –∫–æ–º–Ω–∞—Ç–µ
	if room.Chairman == nil || room.Chairman.Conn == nil {
		log.Println("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å–µ—Ç–∏:", examID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞–º)
	for _, examiner := range room.Examiners {
		if examiner.Conn != nil {
			examiner.Conn.WriteJSON(map[string]interface{}{
				"type": "chairman_status",
				"data": "present", // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏
			})
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è —Å–∞–º–æ–º—É –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ)
	if room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(map[string]interface{}{
			"type": "chairman_status",
			"data": "present", // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏
		})
	}

	// –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º
	startData := map[string]interface{}{
		"type": "redirect",
		"data": map[string]interface{}{
			"url": "/user/exam/start/" + strconv.Itoa(examID), // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º
		},
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é
	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(startData)
	}
}

func handleOpenStudent(c *websocket.Conn, examID int, studentID uint) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	openData := map[string]interface{}{
		"type": "open_student",
		"data": map[string]interface{}{
			"url": fmt.Sprintf("/user/exam/student/%d/%d", examID, studentID), // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
			"id":  studentID,
		},
	}

	for _, examiner := range room.Examiners {
		if examiner.Conn != nil && room.Connected[examiner.UserID] {
			examiner.Conn.WriteJSON(openData)
		}
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(openData)
	}
}

func handleProgressUpdate(c *websocket.Conn, examID int, studentID uint, currentProgress int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	room.Progress[studentID] = currentProgress

	progressData := map[string]interface{}{
		"type": "progress_update",
		"data": map[string]interface{}{
			"studentId":       studentID,
			"currentProgress": currentProgress,
		},
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(progressData)
	}
}

func broadcastExaminerList(room *ExamRoom) {
	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	list := []map[string]interface{}{}
	for _, examiner := range room.ExaminerList {
		status := "offline"
		if room.Connected[examiner.ID] {
			status = "online"
		}
		list = append(list, map[string]interface{}{
			"id":     examiner.ID,
			"name":   examiner.Name,
			"avatar": examiner.Avatar,
			"status": status,
		})
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(map[string]interface{}{
			"type": "examiner_list",
			"data": list,
		})
	}
}

func broadcastChairmanStatus(room *ExamRoom) {
	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	// –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
	for _, examiner := range room.Examiners {
		if examiner.Conn != nil {
			status := "absent"
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å
			if room.Chairman != nil && room.Connected[room.ChairmanID] {
				status = "present"
			}
			examiner.Conn.WriteJSON(map[string]interface{}{
				"type": "chairman_status",
				"data": status,
			})
		}
	}
}

func startPingPong(room *ExamRoom) {
	for {
		time.Sleep(30 * time.Second)

		room.Mutex.Lock()
		for _, examiner := range room.Examiners {
			if examiner.Conn != nil && room.Connected[examiner.UserID] {
				examiner.Conn.WriteJSON(map[string]interface{}{
					"type": "ping",
				})
			}
		}
		if room.Chairman != nil && room.Chairman.Conn != nil && room.Connected[room.ChairmanID] {
			room.Chairman.Conn.WriteJSON(map[string]interface{}{
				"type": "ping",
			})
		}
		room.Mutex.Unlock()
	}
}

func findAvatarPath(storagePath string) string {
	if storagePath == "" {
		return ""
	}
	files, err := os.ReadDir(storagePath)
	if err != nil {
		return ""
	}
	for _, f := range files {
		if strings.HasPrefix(f.Name(), "avatar") {
			return "/uploads/" + filepath.Base(storagePath) + "/" + f.Name()
		}
	}
	return ""
}







package services

import (
	"att_service/database"
	"att_service/models"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gofiber/websocket/v2"
)

type Client struct {
	UserID uint
	Name   string
	Role   string
	Conn   *websocket.Conn
}

type ExaminerInfo struct {
	ID     uint
	Name   string
	Avatar string
}

type ExamRoom struct {
	ChairmanID   uint
	Chairman     *Client
	Examiners    map[uint]*Client
	ExaminerList []ExaminerInfo
	Connected    map[uint]bool
	Progress     map[uint]int // studentID -> number of votes
	Quorum       int
	ChairmanStatus string      // –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è (present / absent)
	Mutex        sync.Mutex
}

var examRooms = make(map[int]*ExamRoom)
var globalMutex sync.Mutex

// WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func WebSocketHandler(c *websocket.Conn) {
	defer c.Close()

	var room *ExamRoom
	var client *Client

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		_, msg, err := c.ReadMessage()
		if err != nil {
			break
		}

		var incoming struct {
			Type string          `json:"type"`
			Data json.RawMessage `json:"data"`
		}

		// –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if err := json.Unmarshal(msg, &incoming); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			continue
		}

		switch incoming.Type {
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä)
		case "init_user":
			var data struct {
				ExamID int    `json:"exam_id"`
				UserID uint   `json:"user_id"`
				Name   string `json:"name"`
				Role   string `json:"role"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ init_user:", err)
				continue
			}

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–Ω–∞—Ç—ã
			r, cl := handleInitUser(c, data.ExamID, data.UserID, data.Name)
			r.Mutex.Lock()
			r.Connected[cl.UserID] = true
			r.Mutex.Unlock()
			room = r
			client = cl

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
			go startPingPong(room)
			broadcastExaminerList(room)
			broadcastChairmanStatus(room)

		// –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
		case "request_examiner_list":
			var data struct {
				ExamID int `json:"exam_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ request_examiner_list:", err)
				continue
			}
			handleRequestExaminerList(c, data.ExamID)

		// –°—Ç–∞—Ä—Ç —ç–∫–∑–∞–º–µ–Ω–∞
		case "start_exam":
			var data struct {
				ExamID int `json:"exam_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ start_exam:", err)
				continue
			}
			handleStartExam(c, data.ExamID)

		// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
		case "open_student":
			var data struct {
				ExamID    int  `json:"exam_id"`
				StudentID uint `json:"student_id"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ open_student:", err)
				continue
			}
			handleOpenStudent(c, data.ExamID, data.StudentID)

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
		case "progress_update":
			var data struct {
				ExamID          int  `json:"exam_id"`
				StudentID       uint `json:"student_id"`
				CurrentProgress int  `json:"current_progress"`
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ progress_update:", err)
				continue
			}
			handleProgressUpdate(c, data.ExamID, data.StudentID, data.CurrentProgress)

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
		case "save_grade":
			var data struct {
				ExamID          uint   `json:"exam_id"`
				StudentID       uint   `json:"student_id"`
				Scores          []int  `json:"scores"`          // –±–∞–ª–ª—ã (–º–∞—Å—Å–∏–≤)
				Qualification   string `json:"qualification"`   // –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
				Recommendations string `json:"recommendations"` // —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
				Specialization  string `json:"specialization"`  // —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
				Abstained       bool   `json:"abstained"`       // —Ñ–ª–∞–≥ –≤–æ–∑–¥–µ—Ä–∂–∞–Ω–∏—è
			}
			if err := json.Unmarshal(incoming.Data, &data); err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ save_grade:", err)
				continue
			}

			if room == nil || client == nil {
				log.Println("–ù–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
				continue
			}

			// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –≤ ExamGrade
			grade := models.ExamGrade{
				ExamID:         data.ExamID,
				ExaminerID:     client.UserID,
				StudentID:      data.StudentID,
				Qualification:  data.Qualification,
				Specialization: data.Specialization,
				Recommendation: data.Recommendations,
				Abstained:      data.Abstained,
			}

			if err := database.DB.Create(&grade).Error; err != nil {
				log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏:", err)
				continue
			}

			// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
			var gradesCount int64
			database.DB.Model(&models.ExamGrade{}).
				Where("exam_id = ? AND student_id = ?", data.ExamID, data.StudentID).
				Count(&gradesCount)

			// –£–∑–Ω–∞—ë–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
			var exam models.Exam
			if err := database.DB.First(&exam, data.ExamID).Error; err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞:", err)
				continue
			}

			// –°—á–∏—Ç–∞–µ–º —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ + –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è
			var totalExaminers int64
			database.DB.Table("exam_examiners").Where("exam_id = ?", data.ExamID).Count(&totalExaminers)
			totalExaminers += 1 // –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Ç–æ–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç

			// –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
			progressPercent := int(float64(gradesCount) / float64(totalExaminers) * 100)

			// –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç?
			completed := gradesCount >= totalExaminers

			// –®–ª—ë–º –≤—Å–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
			if room != nil {
				room.Mutex.Lock()
				defer room.Mutex.Unlock()

				for _, examiner := range room.Examiners {
					if examiner.Conn != nil {
						examiner.Conn.WriteJSON(map[string]interface{}{
							"type": "progress_update",
							"data": map[string]interface{}{
								"studentId": data.StudentID,
								"progress":  progressPercent,
								"completed": completed,
							},
						})
					}
				}
				if room.Chairman != nil && room.Chairman.Conn != nil {
					room.Chairman.Conn.WriteJSON(map[string]interface{}{
						"type": "progress_update",
						"data": map[string]interface{}{
							"studentId": data.StudentID,
							"progress":  progressPercent,
							"completed": completed,
						},
					})
				}
			}
			// –ï—Å–ª–∏ –ù–ï –≤–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è ‚Äî —Å–æ–∑–¥–∞—ë–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
			if !data.Abstained && len(data.Scores) > 0 {
				for i, score := range data.Scores {
					criterion := models.ExamGradeCriterion{
						GradeID:     grade.ID,
						CriterionID: i + 1, // üî• –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–¥—É—Ç —Å 1
						Score:       optionalInt(score),
					}
					if err := database.DB.Create(&criterion).Error; err != nil {
						log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è:", err)
						continue
					}
				}
			}

			// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
			var redirectURL string
			if client.Role == "chairman" {
				redirectURL = fmt.Sprintf("/user/exam/start/%d", data.ExamID)
			} else {
				redirectURL = fmt.Sprintf("/user/exam/waiting/%d", data.ExamID)
			}

			if client.Conn != nil {
				client.Conn.WriteJSON(map[string]interface{}{
					"type": "redirect",
					"data": map[string]interface{}{
						"url": redirectURL,
					},
				})
			}

		case "ping":
			// –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∞ –ø–∏–Ω–≥
			continue

		default:
			log.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", incoming.Type)
		}
	}

	if room != nil && client != nil {
		room.Mutex.Lock()
		delete(room.Connected, client.UserID)
		room.Mutex.Unlock()
		broadcastExaminerList(room)
		broadcastChairmanStatus(room)
	}
}

func optionalInt(v int) *int {
	return &v
}

func handleInitUser(c *websocket.Conn, examID int, userID uint, userName string) (*ExamRoom, *Client) {
	var exam models.Exam
	if err := database.DB.First(&exam, examID).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–∫–∑–∞–º–µ–Ω–∞:", err)
		return nil, nil
	}

	client := &Client{
		UserID: userID,
		Name:   userName,
		Conn:   c,
	}

	globalMutex.Lock()
	room, exists := examRooms[examID]
	if !exists {
		room = &ExamRoom{
			Examiners:    make(map[uint]*Client),
			Connected:    make(map[uint]bool),
			Progress:     make(map[uint]int),
			Quorum:       2,
			ExaminerList: []ExaminerInfo{},
		}
		examRooms[examID] = room
	}
	globalMutex.Unlock()

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	if userID == exam.ChairmanID {
		client.Role = "chairman"
		room.ChairmanID = userID
		room.Chairman = client

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞
		var examinerIDs []uint
		database.DB.Table("exam_examiners").Where("exam_id = ?", examID).Pluck("user_id", &examinerIDs)

		room.ExaminerList = []ExaminerInfo{}
		for _, eid := range examinerIDs {
			if eid == exam.ChairmanID {
				continue
			}
			var user models.User
			if err := database.DB.First(&user, eid).Error; err == nil {
				room.ExaminerList = append(room.ExaminerList, ExaminerInfo{
					ID:     user.ID,
					Name:   user.SurnameInIp + " " + user.NameInIp + " " + user.LastnameInIp,
					Avatar: findAvatarPath(user.StoragePath),
				})
			}
		}
	} else {
		client.Role = "examiner"
		room.Examiners[userID] = client
	}

	return room, client
}

func handleRequestExaminerList(c *websocket.Conn, examID int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}
	broadcastExaminerList(room)
}

func handleStartExam(c *websocket.Conn, examID int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		log.Println("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", examID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –≤ –∫–æ–º–Ω–∞—Ç–µ
	if room.Chairman == nil || room.Chairman.Conn == nil {
		log.Println("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å–µ—Ç–∏:", examID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–≤ —Ç–æ–º —á–∏—Å–ª–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞–º)
	for _, examiner := range room.Examiners {
		if examiner.Conn != nil {
			examiner.Conn.WriteJSON(map[string]interface{}{
				"type": "chairman_status",
				"data": "present", // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏
			})
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è —Å–∞–º–æ–º—É –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–æ)
	if room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(map[string]interface{}{
			"type": "chairman_status",
			"data": "present", // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏
		})
	}

	// –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º
	startData := map[string]interface{}{
		"type": "redirect",
		"data": map[string]interface{}{
			"url": "/user/exam/start/" + strconv.Itoa(examID), // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º
		},
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–º –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é
	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(startData)
	}
}

func handleOpenStudent(c *websocket.Conn, examID int, studentID uint) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	openData := map[string]interface{}{
		"type": "open_student",
		"data": map[string]interface{}{
			"url": fmt.Sprintf("/user/exam/student/%d/%d", examID, studentID), // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
			"id":  studentID,
		},
	}

	for _, examiner := range room.Examiners {
		if examiner.Conn != nil && room.Connected[examiner.UserID] {
			examiner.Conn.WriteJSON(openData)
		}
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(openData)
	}
}

func handleProgressUpdate(c *websocket.Conn, examID int, studentID uint, currentProgress int) {
	globalMutex.Lock()
	room, exists := examRooms[examID]
	globalMutex.Unlock()

	if !exists || room == nil {
		return
	}

	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	room.Progress[studentID] = currentProgress

	progressData := map[string]interface{}{
		"type": "progress_update",
		"data": map[string]interface{}{
			"studentId":       studentID,
			"currentProgress": currentProgress,
		},
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(progressData)
	}
}

func broadcastExaminerList(room *ExamRoom) {
	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	list := []map[string]interface{}{}
// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
	for _, examiner := range room.ExaminerList {
		status := "offline"
		if room.Connected[examiner.ID] {
			status = "online"
		}
		list = append(list, map[string]interface{}{
			"id":     examiner.ID,
			"name":   examiner.Name,
			"avatar": examiner.Avatar,
			"status": status,
		})
	}

	if room.Chairman != nil && room.Chairman.Conn != nil {
		room.Chairman.Conn.WriteJSON(map[string]interface{}{
			"type": "examiner_list",
			"data": list,
		})
	}
}

func broadcastChairmanStatus(room *ExamRoom) {
	room.Mutex.Lock()
	defer room.Mutex.Unlock()

	// –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–æ–≤
	for _, examiner := range room.Examiners {
		if examiner.Conn != nil {
			status := "absent"
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å
			if room.Chairman != nil && room.Connected[room.ChairmanID] {
				status = "present"
			}
			examiner.Conn.WriteJSON(map[string]interface{}{
				"type": "chairman_status",
				"data": status,
			})
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func startPingPong(room *ExamRoom) {
	for {
		time.Sleep(30 * time.Second)

		room.Mutex.Lock()
		for _, examiner := range room.Examiners {
			if examiner.Conn != nil && room.Connected[examiner.UserID] {
				examiner.Conn.WriteJSON(map[string]interface{}{
					"type": "ping",
				})
			}
		}
		if room.Chairman != nil && room.Chairman.Conn != nil && room.Connected[room.ChairmanID] {
			room.Chairman.Conn.WriteJSON(map[string]interface{}{"type": "ping"})
		}
		room.Mutex.Unlock()
	}
}

func findAvatarPath(storagePath string) string {
	if storagePath == "" {
		return ""
	}
	files, err := os.ReadDir(storagePath)
	if err != nil {
		return ""
	}
	for _, f := range files {
		if strings.HasPrefix(f.Name(), "avatar") {
			return "/uploads/" + filepath.Base(storagePath) + "/" + f.Name()
		}
	}
	return ""
}